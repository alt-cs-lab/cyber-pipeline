import Model from './base.js';

/**
 * @swagger
 * components:
 *   schemas:
 *     District:
 *       type: object
 *       required:
 *         - name
 *       properties:
 *         id:
 *           type: integer
 *           description: autogenerated id
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 255
 *           description: the name of the district
 *         usd:
 *           type: integer
 *           description: the USD number of the district
 *         url:
 *           type: string
 *           format: uri
 *           description: the district's website URL
 *         locale:
 *           type: integer
 *           description: the NCES locale code for the district
 *         notes:
 *           type: string
 *           description: any notes about the district
 *         teachers:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               id:
 *                 type: integer
 *                 description: autogenerated id
 *               name:
 *                 type: string
 *                 description: the name of the teacher
 *               notes:
 *                 type: string
 *                 description: notes about teacher in the district
 *               primary:
 *                 type: boolean
 *                 description: is this the primary district for the teacher?
 *       example:
 *         id: 1
 *         name: School District
 *         usd: 123
 *         url: https://www.usd123.local/
 *         locale: 13
 *         notes: This is a test district
 *         teachers:
 *           - id: 1
 *             name: Test Teacher
 *             notes: Teacher 1 in District 1
 *             primary: true
 */
class District extends Model {
  // Table name is the only required property.
  static get tableName() {
    return 'districts';
  }

  // Each model must have a column (or a set of columns) that uniquely
  // identifies the rows. The column(s) can be specified using the `idColumn`
  // property. `idColumn` returns `id` by default and doesn't need to be
  // specified unless the model's primary key is something else.
  static get idColumn() {
    return 'id';
  }

  // Optional JSON schema. This is not the database schema!
  // No tables or columns are generated based on this. This is only
  // used for input validation. Whenever a model instance is created
  // either explicitly or implicitly it is checked against this schema.
  static get jsonSchema() {
    return {
      type: 'object',
      required: ['name'],
      properties: {
        name: { type: 'string', minLength: 1, maxLength: 255 },
        url: { type: 'string', minLength: 1, maxLength: 255, format: 'uri' },
        usd: { type: 'integer' },
        locale: { type: 'integer' },
      },
    };
  }

  static get virtualAttributes() {
    return ['usdName'];
  }

  usdName() {
    return `${this.usd} - ${this.name}`;
  }

  // This object defines the relations to other models.
  static get relationMappings() {
    const Teacher = require('./teacher.js'); // Ensure to add .js extension

    return {
      teachers: {
        relation: Model.ManyToManyRelation,
        modelClass: Teacher,
        join: {
          from: 'districts.id',
          through: {
            from: 'teacher_districts.district_id',
            extra: ['notes', 'primary'],
            to: 'teacher_districts.teacher_id',
          },
          to: 'teachers.id',
        },
        filter: (builder) =>
          builder.select(
            'id',
            'name',
            'teacher_districts.notes',
            'teacher_districts.primary'
          ),
      },
      teachers_raw: {
        relation: Model.ManyToManyRelation,
        modelClass: Teacher,
        join: {
          from: 'districts.id',
          through: {
            from: 'teacher_districts.district_id',
            extra: ['notes', 'primary'],
            to: 'teacher_districts.teacher_id',
          },
          to: 'teachers.id',
        },
      },
    };
  }
}

export default District;
